# Version minimale de CMake requise
cmake_minimum_required(VERSION 3.10)

# Nom du projet
project(ray_tracing LANGUAGES CXX)

# Ajouter un standard C++
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

find_package(minifb REQUIRED)

include_directories(/usr/local/include)

# Ajouter les répertoires include
include_directories(includes)
link_directories(/usr/local/lib)

# Ajouter la librairie
# add_subdirectory(Minifb)

# Récupérer automatiquement tous les fichiers .cpp dans le répertoire src/
file(GLOB_RECURSE SRC_FILES *.cpp)

# Exclure les fichiers dans le dossier "CMakeFiles"
list(FILTER SRC_FILES EXCLUDE REGEX "CMakeFiles")

# Excluse Minifb
list(FILTER SRC_FILES EXCLUDE REGEX "minifb/.*")
list(FILTER SRC_FILES EXCLUDE REGEX "ppm_visualization/.*")
list(FILTER SRC_FILES EXCLUDE REGEX "pixel_vector_display/.*")

# Ajouter l'exécutable principal
add_executable(ray_tracing ${SRC_FILES})

# target_link_libraries(ray_tracing sfml-graphics sfml-window sfml-system)
target_link_libraries(ray_tracing PRIVATE minifb "-framework Cocoa" "-framework QuartzCore" "-framework IOKit" "-framework Metal" "-framework MetalKit")

# on lie Minifb
# target_link_libraries(ray_tracing PRIVATE Minifb)
# target_include_directories(Minifb PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)

# Optionnel : Ajouter des options pour compiler avec des warnings
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    target_compile_options(ray_tracing PRIVATE -Wall -Wextra -Wpedantic)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(ray_tracing PRIVATE /W4)
endif()
